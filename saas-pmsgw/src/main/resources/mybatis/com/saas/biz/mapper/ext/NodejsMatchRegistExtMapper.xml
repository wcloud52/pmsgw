<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.saas.biz.mapper.ext.NodejsMatchRegistExtMapper">
    <!-- 动态查询列表 -->
	<select id="selectListByDynamic"
		resultMap="com.saas.biz.mapper.base.NodejsMatchRegistMapper.BaseResultMap"
		parameterType="Object">
		select <include refid="com.saas.biz.mapper.base.NodejsMatchRegistMapper.Base_Column_List" />
		from nodejs_match_regist
		<where>
			<if test="customQuerySegment != null and customQuerySegment != '' ">
				and ${customQuerySegment}
			</if>
			<if test="customQuerySegment != null and customQuerySegment != '' ">
				and ${customQuerySegment}
			</if>
			<if test="queryMap.match_id != null" >
				and match_id = #{queryMap.match_id,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.member_code != null" >
				and member_code = #{queryMap.member_code,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.member_name != null" >
				and member_name = #{queryMap.member_name,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.pigeon_code != null" >
				and pigeon_code = #{queryMap.pigeon_code,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.create_time != null" >
				and create_time = #{queryMap.create_time,jdbcType=TIMESTAMP}
			</if>
			<if test="queryMap.create_user_id != null" >
				and create_user_id = #{queryMap.create_user_id,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.modify_time != null" >
				and modify_time = #{queryMap.modify_time,jdbcType=TIMESTAMP}
			</if>
			<if test="queryMap.cote_id != null" >
				and cote_id = #{queryMap.cote_id,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.cote_name != null" >
				and cote_name = #{queryMap.cote_name,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.regist != null" >
				and regist = #{queryMap.regist,jdbcType=LONGVARCHAR}
			</if>
		</where>
		<if test="sort != null and sort != '' ">
			order by ${sort}
		</if>
		<if test="page != null ">
			limit ${page.offset},${page.pageSize}
		</if>
	</select>

    <!-- 动态查询总数 -->
	<select id="selectCountByDynamic" resultType="long"
		parameterType="Object">
		SELECT count(*)
		from nodejs_match_regist
		<where>
			<if test="customQuerySegment != null and customQuerySegment != '' ">
				and ${customQuerySegment}
			</if>
			<if test="customQuerySegment != null and customQuerySegment != '' ">
				and ${customQuerySegment}
			</if>
			<if test="queryMap.match_id != null" >
				and match_id = #{queryMap.match_id,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.member_code != null" >
				and member_code = #{queryMap.member_code,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.member_name != null" >
				and member_name = #{queryMap.member_name,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.pigeon_code != null" >
				and pigeon_code = #{queryMap.pigeon_code,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.create_time != null" >
				and create_time = #{queryMap.create_time,jdbcType=TIMESTAMP}
			</if>
			<if test="queryMap.create_user_id != null" >
				and create_user_id = #{queryMap.create_user_id,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.modify_time != null" >
				and modify_time = #{queryMap.modify_time,jdbcType=TIMESTAMP}
			</if>
			<if test="queryMap.cote_id != null" >
				and cote_id = #{queryMap.cote_id,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.cote_name != null" >
				and cote_name = #{queryMap.cote_name,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.regist != null" >
				and regist = #{queryMap.regist,jdbcType=LONGVARCHAR}
			</if>
		</where>
	</select>
	
	 <!-- 动态删除 -->
	<delete id="deleteByDynamic" parameterType="Object">
		delete from nodejs_match_regist
		<where>
			<if test="customQuerySegment != null and customQuerySegment != '' ">
				and ${customQuerySegment}
			</if>
			<if test="queryMap.match_id != null" >
				and match_id = #{queryMap.match_id,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.member_code != null" >
				and member_code = #{queryMap.member_code,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.member_name != null" >
				and member_name = #{queryMap.member_name,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.pigeon_code != null" >
				and pigeon_code = #{queryMap.pigeon_code,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.create_time != null" >
				and create_time = #{queryMap.create_time,jdbcType=TIMESTAMP}
			</if>
			<if test="queryMap.create_user_id != null" >
				and create_user_id = #{queryMap.create_user_id,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.modify_time != null" >
				and modify_time = #{queryMap.modify_time,jdbcType=TIMESTAMP}
			</if>
			<if test="queryMap.cote_id != null" >
				and cote_id = #{queryMap.cote_id,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.cote_name != null" >
				and cote_name = #{queryMap.cote_name,jdbcType=VARCHAR}
			</if>
			<if test="queryMap.regist != null" >
				and regist = #{queryMap.regist,jdbcType=LONGVARCHAR}
			</if>
		</where>
	</delete>
	
	<!-- 批量插入 -->
	<insert id="insertBatch" parameterType="list">
		insert into nodejs_match_regist 
		(
		id, match_id, member_code,
		member_name,pigeon_code, create_time, create_user_id, modify_time,
		cote_id, cote_name,regist
		)
		values
		<foreach item="item" index="index" collection="list" open=""
			separator="," close="">
			(
				#{item.id,jdbcType=VARCHAR},
			 	#{item.match_id,jdbcType=VARCHAR},
			  	#{item.member_code,jdbcType=VARCHAR},
				#{item.member_name,jdbcType=VARCHAR},
				#{item.pigeon_code,jdbcType=VARCHAR},
			 	#{item.create_time,jdbcType=TIMESTAMP},
			 	#{item.create_user_id,jdbcType=VARCHAR},
			  	#{item.modify_time,jdbcType=TIMESTAMP},
				#{item.cote_id,jdbcType=VARCHAR},
			 	#{item.cote_name,jdbcType=VARCHAR},
			  	#{item.regist,jdbcType=LONGVARCHAR}
			)
		</foreach>
	</insert>
    
    <!-- 批量更新 -->
    <update id="updateBatch" parameterType="list">
		<foreach collection="list" item="item" index="index" open=""
			close="" separator=";">
			 update nodejs_match_regist
			<set >
				<if test="item.match_id != null" >
					match_id = #{item.match_id,jdbcType=VARCHAR},
				</if>
				<if test="item.member_code != null" >
					member_code = #{item.member_code,jdbcType=VARCHAR},
				</if>
				<if test="item.member_name != null" >
					member_name = #{item.member_name,jdbcType=VARCHAR},
				</if>
				<if test="item.pigeon_code != null" >
					pigeon_code = #{item.pigeon_code,jdbcType=VARCHAR},
				</if>
				<if test="item.create_time != null" >
					create_time = #{item.create_time,jdbcType=TIMESTAMP},
				</if>
				<if test="item.create_user_id != null" >
					create_user_id = #{item.create_user_id,jdbcType=VARCHAR},
				</if>
				<if test="item.modify_time != null" >
					modify_time = #{item.modify_time,jdbcType=TIMESTAMP},
				</if>
				<if test="item.cote_id != null" >
					cote_id = #{item.cote_id,jdbcType=VARCHAR},
				</if>
				<if test="item.cote_name != null" >
					cote_name = #{item.cote_name,jdbcType=VARCHAR},
				</if>
				<if test="item.regist != null" >
					regist = #{item.regist,jdbcType=LONGVARCHAR},
				</if>
			</set>
			where
			id=#{item.id,jdbcType=VARCHAR}
		</foreach>
	</update>

	<update id="updateRegistRank" parameterType="Object">
		UPDATE nodejs_match_regist AS a
		LEFT JOIN ${database}.nodejs_crawler_detail_game AS b ON a.pigeon_code = b.ringnum
		SET a.rank = b.rank
		WHERE
			a.match_id = #{match_id}
		AND b.cote_id = #{cote_id}
		AND b.cometime BETWEEN #{start_time}
		AND #{end_time}
	</update>
	<update id="updateSumReward" parameterType="Object">
		<foreach collection="list" item="item" index="index" open=""
				 close="" separator=";">
			update nodejs_match_regist
			<set >
				<if test="item.match_id != null" >
					reward = reward+#{item.reward,jdbcType=FLOAT},
				</if>
			</set>
			where
			id=#{item.id,jdbcType=VARCHAR}
		</foreach>
	</update>
	<select id="selectCrawlerDetailGame" resultMap="com.saas.biz.mapper.base.NodejsMatchRegistMapper.BaseResultMap"
			parameterType="Object">
		SELECT
			b.rank,
			a.pigeon_code,
			a.regist
		FROM
			(
				SELECT
					pigeon_code,
					regist
				FROM
					nodejs_match_regist
				WHERE
					match_id =#{match_id}
			) AS a
				LEFT JOIN (
				select ringnum,rank from ${database}.nodejs_crawler_detail_game  where
					cote_id =#{cote_id} and detail_id like concat(#{start_time},'%')
			)
				AS b ON a.pigeon_code = b.ringnum
		ORDER BY
			rank
	</select>
	
</mapper>